---
layout: post
title: "Scaling"
subtitle: "Lecture 10 - Scaling (Deadline 2021/10/08 23:55)"
date: 2021-10-07 16:59:11 +0200
categories: jekyll update
background: "/images/image1.jpg"
---

# Introduction

In this post we will talk about scaling in/out and scaling up/down. These are also known as scaling horizontally or vertically. We will look at pricing to scale horizontally and vertically. We will also compare scaling a Virtual Machine vs. a App Service. Lastly we will look at different Azure Service Plans and which scaling opportunities they give. I have also added a part where i test a Azure Function App with `loader.io`. Since I only picked the free plan when i signed up, I was only able to do one test which will send 250 client requests to my GET method inside my function. So lets dive into the `loader.io` tests where I will post screenshots of the test results in Azure Portal Application Insights together with Loader.io.

## Loader.io

So, in order to make loader.io tests work I had to follow this documentation: [Load testing Azure Functions](https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/). Basically, what I had to do was to sign up to [loader.io](https://loader.io/). What I had to add into my source code was a `proxies.json` file inside my root folder for my Azure Functions. See [proxies.json](https://github.com/Orhan92/CosmosFunction/blob/main/proxies.json) file inside my repo. Then I had to re-publish my functions in order to add the loader.io proxy into my functions. When this was done I could easily load test my function at [loader.io](https://loader.io/). Down below I will show you screenshots of the tests (loader.io) and metrics (Azure portal).

##### Test results from loader.io

![loader.io](/images/test-finished.png){:class="img-fluid"}

We can see that there is almost 10 000 responsed with a high amount of total bandwidth. This tells us that our function has been executed ALOT in a period of 1 minute. We can also see that there is a slow response time at one point (around 50 sec execution time). This is where, after I looked through my logs inside Azure portal, our function starts to use more instances, namely 2 instances. After that we can see that the response time lowers again. We can also see that we had a few StatuCode 500's (around 80 out of 100 000 requests) during the "peak" time (where a new instance was added).

![Loader errors](/images/loader-errors.png){:class="img-fluid"}

This could be explained by too much amount of pressure on the function which led to a response code 500: _a generic error response. It means that the server encountered an unexpected condition that prevented it from fulfilling the request. This error is usually returned by the server when no other error code is suitable_. a short conclusion is that when our function encountered high pressure and started throwing exceptions, then another instance of the function was added and the function ran properly again right after that.

##### Function Instances

![Function Instance](/images/instance-loader.png){:class="img-fluid"}

It is clear that we get another instance of our function once our function gets overloaded by requests which can be seen in the loader picture above.

##### Azure Function Metrics

![Function metrics](/images/loader-metrics.png){:class="img-fluid"}

Our metrics shows us that the function has been executed around 300.000 times. I have to admit that I ran multiple different tests inside loader.io which resulted in alot of executions of our function. But that isn't the point. The point here was to see that our function scaled and started to run on another instance as soon as the function got overloaded.

This was a short example of the loader.io tests. Lets move on to the other topics that we have to discuss in this blog post.

## Scaling & Scaling horizontally vs vertically

**What is scaling?**

When we talk about Scaling, then we are talking about growing an infrastructure larger so that our services (application) can serve more people at a time.
Scaling is a process that adjust your available resources based on the demand. Scaling is commonly used in cloud services where you can scale up/down or scale in/out depending on the demands for your services. So lets say you have a web shop, and you know that during Black Friday, your website usually has high pressure and alot of orders made. A good idea would be to scale your application in order for your website to run smoothly. in other words you are adjusting the resources available to meet the demands. It is possible to give rules to when you want your application to scale. With the example above you can set a given date and time to scale your application (create more instances of it for example) during Black Friday. Or you can give rules to scale when a metric criteria is met. For example if your application's CPU crosses a certain % use, lets say 70%, you want your application to scale-out with 1 instance. And later on you want the application to scale-in whenever CPU % heads back down to 50%. This way you have applied a rule which will autoscale your application based on metrics. There are different rules that can be made based on _Avergae, Minimum, Maximum, Total, Last and Count_ options. For example if Average CPU usage is 70% scale-out. NOTICE: if you have, lets say, 5 instances. Then your application will take the usage of all the 5 instances together and see what the average usage is. If it is 70% then autoscaling rule will scale-out. You can easily notice that autoscaling is a good idea when it comes to performance, reliability and availability. Whenever the pressure is high on our services, we scale out. When it is low, we scale in. This way we only pay for what is needed (IF setup properly).

**Scaling Horizontally (in-out) vs. Scaling Vertically (up-down)**

Scaling Vertically means that we are taking what resources we have and replacing it with something more powerful. This could be for example a storage that can hold up to 100GB now sclaes up and can hold 1000GB. It could also, from a networking perspective mean that we are taking 1GbE switch and scaling it to a 10GbE switch. This way we have scaled from 1GbE to 10GbE which has more power. Scaling Up is good until we cannot scale up individual parts anymore. This is where scaling out comes in. As an illustration, imagine that you have a box of cereals. First draft of your cereal box was tiny and you decided that you wanted something bigger so that one box could last longer for you in your storage. So what you do? You scaled it up (vertically). You now have a bigger box of cereals which lasts longer. But now people become aware of your cereals and they want some too! Instead of charing cereals from the same box, you decide to create more boxes so that everyone can have their own box. So what did you do? You might have guessed it, you scaled out (horizontally) by creating more boxes. So Scaling Horizontally takes your resources and replicates it.

## Costs to scale Veritcally vs Horizontally (VM's and App Services)

---

#### Costs to scale a Virtual Machine (VM) Horizontally vs Vertically

Suppose that we have 1 initial VM with set prefixes (See images below). The average cost for this Virtual Machine is $152.00 / month. Now we want to scale our VM Horizontally to create more instances of the same VM. So lets say that we scale the same VM out from 1 VM to 5 VM's. Then we can basically see that we pay around 152 x 5 = $760 / month. So we would have to pay around $760 / month. See images below.

###### 1 VM

![1 VM](/images/one-vm.png){:class="img-fluid"}

###### 5 VM Instances (Horizontally Scaling)

![5 VM](/images/five-vm.png){:class="img-fluid"}

###### 1 VM (Vertically Scaling)

Now lets have a look at that 1 VM above, and try to add some power to it (Scaling Vertically (up)) and see how it affects the price. HINT: Look at the description column and see that we have added some more power into our VM below.

![1 VM Scaled-up](/images/scale-up-vm.png){:class="img-fluid"}

We can see that if we scale up our VM (image above), then we will have a monthly cost of around $610.
A brief conclusion about scaling VM's horizontally vs vertically is that we can tell that scaling up our resources is kind of expensive. But sometimes it is actually needed. In some cases we might know exactly what kind of power we need, then it will become more cost efficient to scale your one instance up (vertically). But if we don't know what kind of power we need then it might become more useful to scale out (horizontally) with more instances of our "less" powerful VM. We can tell, just by these images above that 5 VM instances of a less powerful VM almost has the same cost as 1 more powerful VM. What to choose? Well, that depends!

#### Costs to scale a App Service Horizontally vs Vertically

Suppose that we have a App Service with a Standard Tier of Instance S1. Our monthly cost of that App Service would be $73. So now as we need to scale out our App Service, we decide to scale it out with 5 instances. Then our monthly cost would be 73 x 5 = $365.

###### 1 App Service

![1 App Service](/images/one-appservice.png){:class="img-fluid"}

###### 5 App Service Instances (Horizontally Scaling)

![5 App Service](/images/five-appservice.png){:class="img-fluid"}

###### 1 App Service (Vertically Scaling)

Lets suppose we use the same 1 App Service (from the image above). We want to Scale it up (Vertically) and see how it affects the price. This time we want to change from instance `S1` to `S3` as it will add more RAM and Cores to our App Service. HINT: Look at the description column in the image below.

![1 App Service Scaled up](/images/appservice-s3.png){:class="img-fluid"}

If we look at this image above (Vertically scaled App Service), then we would have a monthly cost of $292. It is still cheaper than having 5 instances of the `S1` plan. But it is not far from the same cost. But of course, it depends on what you scale up to. If you choose another service plan then it might be even more expensive to run 1 instance of an App Service than it is to scale out one cheaper service plan into 5 instances. And yes, it is possible to change Service Plans for your application ([Manage App Service Plans](https://docs.microsoft.com/en-us/azure/app-service/app-service-plan-manage)). What to choose between? I will reference back to the VM sector above.

#### Azure Service App plans to Scale

So there are a different App Service Plan Tiers. Each of these Tiers come with different benefits. We have: _Free, Shared, Basic, Standard, Premium and Isolated_ plans which gives us different scalability access. The `Free` and `Shared` Tiers does not give us any access to Scale. The `Basic` Tier can be scaled out up to 3 instances, `Standard` Tier can scale out up to 10 instances, `Premium` Tier can scale out up to 30 instances in [selected regions](https://azure.microsoft.com/en-us/updates/increased-app-service-scale-out-limits-for-premiumv2-plans/) and `Isolated` Tier can scale out up to 100 instances. When it comes to scaling up, you can do that with any Service Plan just by changing your App Service plan from `Standard` to `Premium` (example). Depending on how you scale up your Service Plans you will be provided with scaling-out opportunities where different plans gives you different amount of instances.

#### References

[Load testing Azure Functions with Loader.io](https://mikhail.io/2019/07/load-testing-azure-functions-with-loaderio/)\
[What is Scaling?](https://docs.microsoft.com/en-us/learn/modules/scale-apps-app-service/2-autoscale-factors)\
[Autoscaling conditions](https://docs.microsoft.com/en-us/learn/modules/scale-apps-app-service/3-app-service-autoscale-conditions-rules)\
[Scaling](https://packetpushers.net/scale-up-vs-scale-out/)\
[Service Plans and Scalability](https://docs.microsoft.com/en-us/learn/modules/app-service-scale-up-scale-out/2-scale-a-web-app-manually)\
[App Service Pricing](https://azure.microsoft.com/en-us/pricing/details/app-service/windows/)\
[Manage Scale-Up](https://docs.microsoft.com/en-us/azure/app-service/manage-scale-up)\
[Manage App Service Plans](https://docs.microsoft.com/en-us/azure/app-service/app-service-plan-manage)\
[Azure Pricing Calculator](https://azure.microsoft.com/en-us/pricing/calculator/)
